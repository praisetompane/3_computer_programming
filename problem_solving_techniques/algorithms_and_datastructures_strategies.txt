
Optimize&SolveTechnique#1:LookforBUD.................................. 67 
Optimize & Solve Technique #2: DIY (Do It Yourself ) .............................. 69 
Optimize & Solve Technique #3: Simplify and Generalize ........................... 71 Optimize&SolveTechnique#4:BaseCaseandBuild.............................. 71 Optimize&SolveTechnique#5:DataStructureBrainstorm.......................... 72



DATA RE/ORGANISATION:
    0. Can the incoming data structure be used to solve the problem?
        Is there a solution inherent in the structure itself already?

        e.g. repeated string problem
        https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

    1. Can you rearrange the data in to a structure more suitable for the problem?

        e.g. SockMerchant.txt
        https://www.hackerrank.com/challenges/sock-merchant/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

PATH PROBLEMS:
    Path finding
    Counting "events/things" in a path

    2. Walk the problem space while simultaneously solving the problem
        as opposed to mapping out the whole problem space(i.e. the path) then solving the problem
        e.g. 
        JumpingOnTheClouds.txt
        https://www.hackerrank.com/challenges/jumping-on-the-clouds/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup

        CountingValleys.txt
        https://www.hackerrank.com/challenges/counting-valleys/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup
    
    3.  Compute the final state without walking the whole path step by step
        i.e. Avoid O(N) implementation
        If the final state factor is defined(e.g. number of rotations)

        e.g. ArrayLeftRotation.txt
        
        https://www.hackerrank.com/challenges/ctci-array-left-rotation/copy-from/75481377?h_l=interview&playlist_slugs%5B%5D%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D%5B%5D=arrays&isFullScreen=true

    4. Given a jumbled state and an original state
    
        Q: How many operations did it take to get to jumbled state?
        A: Reverse to initial state and count operations required to rollback

        e.g. NewYearChaos.scala

    5. many decision points => 
        problem wording = generate, print all possibilities
        exhaust a search space

        tool = backtrack


    6. determining if object A is in group B
        We do NOT always need to generate the entire group B (This could be a big list)
        Can also determine if the rules that generate object A are a subset of the rules that generate group B

TESTING
    base cases
    general cases
    error cases
    etc

OPTIMISATION
    1. Hash table

    * O(1)
    * O(logₙ)
    * O(N)
    * O(Nlogₙ)
    * O(N²)
    * O(N³)
    * (2ⁿ)


    * O(N²):
        How do you explore n² combinations in N time(i.e. in one iteration = O(N))?


            1. Change from:
                    iterating(exploring) with an index
                        using the index to extract a value
                        and doing some work
                TO
                    iterating(exploring) with a value
                        using the value to do the work
                            if it is a valid value in your universe(i.e. datastructure)
                SO
                    once you have a value
                    you can ask your iterale => Do you have thsi value?

            Example
                Given 
                    nums = [2,9,4,7]
                Objective
                    find possible pair that generates a sum (T)

                Then: iterating(exploring) with an index looks like this:
                    for indexI to length of nums                        : iterating(exploring) with index
                        for indexJ = indexI + 1 to length of nums       : iterating(exploring) with index
                            if nums at indexI + nums at indexJ == T     : using the index to extract a value
                                return nums at indexI and indexJ        : and doing some work
                    ∴ O(N²)

                Then: iterating(exploring) with a value
                    for indexI to length of nums   
                        create a map where
                            the key is the value
                            {key -> value} : key = value, value = arbitary data(maybe the index)

                            {
                                2 -> 0
                                9 -> 1
                                4 -> 2
                                7 -> 3 
                            }
                    for indexI to length of nums 
                        other addend = T - nums at indexI 
                        if other addend is in map
                            return other addend's value in map(i.e. index) and indexI
                    
                    ∴ O(N) + O(N) => O(N2) => O(N)
                        the term that increases the complexity of the problem the most is N
                        ∴ discard the 2
